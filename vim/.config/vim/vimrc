" Install plugins (vim):
" curl -fLo ${XDG_DATA_HOME:-$HOME/.local/share}/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim && vim +PlugInstall

" Add to .profile:
" export VIMINIT="if !has('nvim') | source ${XDG_CONFIG_HOME:-$HOME/.config}/vim/vimrc | endif"

" Must-have...
set nocompatible

" XDG Base Directory specification (https://blog.joren.ga/tools/vim-xdg)
if empty($XDG_CACHE_HOME) | let $XDG_CACHE_HOME = $HOME."/.cache" | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config" | endif
if empty($XDG_DATA_HOME) | let $XDG_DATA_HOME = $HOME."/.local/share" | endif
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after
set packpath^=$XDG_DATA_HOME/vim
set packpath+=$XDG_DATA_HOME/vim/after
let g:netrw_home = $XDG_DATA_HOME."/vim"
silent! call mkdir($XDG_DATA_HOME."/vim/spell", "p")
set viewdir=$XDG_DATA_HOME/vim/view | silent! call mkdir(&viewdir, "p")
if !has("nvim") | silent! set viminfofile=$XDG_CACHE_HOME/vim/viminfo | endif

" Set plugins
call plug#begin($XDG_DATA_HOME."/vim/plugged")

" Themes
Plug 'junegunn/seoul256.vim'
"Plug 'sainnhe/everforest'

" Faaancy
Plug 'airblade/vim-gitgutter'  " Show git diffs on the side
Plug 'Xuyuanp/nerdtree-git-plugin'  " Show git status in nerdtree
Plug 'machakann/vim-highlightedyank'  " Highlight what you've copied
"Plug 'https://heptapod.host/cgtk/taghighlight'

" Syntax
Plug 'cespare/vim-toml'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'lervag/vimtex'

" Project management
Plug 'editorconfig/editorconfig-vim'  " Support editorconfig spec
Plug 'scrooloose/nerdtree'  " File browser
"Plug 'ctrlpvim/ctrlp.vim'  " Fuzzy finding file and tag browser
Plug 'embear/vim-localvimrc'  " Support per-project vimrc files
Plug 'ludovicchabant/vim-gutentags'  " Auto-update tags file

" Editing
Plug 'scrooloose/nerdcommenter'  " Comment easily (easily my most-used plugin)
Plug 'LunarWatcher/auto-pairs'  " Auto-close quotes, parens, etc...
Plug 'vim-scripts/AutoComplPop'  " Autocompletion popup
Plug 'tpope/vim-endwise'  " Auto-end if statements in several languages
Plug 'tpope/vim-surround'  " Bindings too hard to remember and use tbhon
Plug 'tpope/vim-repeat'  " Allow pluggins to hook into '.' repeat
Plug 'junegunn/vim-easy-align'  " Alignment commands bound to 'ga'
Plug 'junegunn/goyo.vim'  " Distraction-free editing
"Plug 'dpelle/vim-LanguageTool'  " Grammar correction
Plug 'michaeljsmith/vim-indent-object'  " Select indentation levels

" Consider
"Plug 'jackguo380/vim-lsp-cxx-highlight'  " C(++) highlighting based on LSP
"Plug 'ervandew/supertab'  " Replace AutoComplPop
" Any of (completion)
"Plug 'w0rp/ale'
"Plug 'neoclide/coc.nvim'
"Plug 'prabirshrestha/vim-lsp'
"Plug 'valloric/youcompleteme'

call plug#end()

" Don't litter tempfiles everywhere
set undodir=$XDG_CACHE_HOME/vim/undo | silent! call mkdir(&undodir, "p")
set backupdir=$XDG_CACHE_HOME/vim/backup | silent! call mkdir(&backupdir, "p")
set directory=$XDG_CACHE_HOME/vim/swp | silent! call mkdir(&directory, "p")

" Color scheme (seoul256)
let g:seoul256_background=233
"set termguicolors
colorscheme seoul256

" Color scheme (everforest)
"set background=dark
"let g:everforest_background='hard'
"let g:everforest_better_performance=1
"let g:everforest_disable_italic_comment=1
"let g:everforest_ui_contrast='high'
"let g:everforest_colors_override = {
"    \ 'bg0': ['#262626', '235'],
"    \ 'bg1': ['#303030', '236']}
"set termguicolors
"colorscheme everforest

" Syntax highlighting
filetype plugin indent on
syntax on

" Whitespace
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set autoindent
set shiftround
set listchars=tab:>-,space:·
set cinoptions+=:0  " Don't indent case in switch

" Display
set number
set hlsearch
set incsearch
set statusline=%f
set colorcolumn=80

highlight ExtraWhitespace ctermbg=234
"au BufWinEnter * match ExtraWhitespace /\s\+$/

" Behavior
set modeline
set omnifunc=syntaxcomplete#Complete
set mouse=a
set ttyfast
set clipboard=unnamed
set clipboard+=unnamedplus
set backup
set undofile
set fileencodings=ucs-bom,utf-8,sjis,default  " Try SHIFT-JIS
if has("patch-8.1.0360") | set diffopt+=internal,algorithm:patience | endif  " Use slower but better diff algorithm

" Keybinds
let mapleader="-"
let maplocalleader="_"
nnoremap <F1> :make<cr>
nnoremap <F12> :syntax sync fromstart<cr>
nnoremap <C-d> :set invlist<cr>
nnoremap <C-n> :NERDTreeToggle<cr>
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader>n :noh<cr>
nnoremap <leader>ve :split ~/.config/vim/vimrc<cr>
nnoremap <leader>vs :source ~/.config/vim/vimrc<cr>
nnoremap <leader>tb :call Tabs(8)<cr>
nnoremap <leader>ts :call Tabs(4)<cr>
nnoremap <leader>tn :call Tabs(0)<cr>

" Behavioral keybinds
"" Escape alternative
inoremap ÑÑ <esc>
inoremap ññ <esc>
"" Auto-indent on paste
nnoremap p p=`]
nnoremap P P=`]
nnoremap <c-p> p
"nnoremap <c-P> P
"" Easier split movement
noremap <C-h> <C-w><C-h>
noremap <C-j> <C-w><C-j>
noremap <C-k> <C-w><C-k>
noremap <C-l> <C-w><C-l>

" vim -b : edit binary using xxd-format!
augroup Binary
    au!
    au BufReadPre *.bin setlocal binary
    au BufReadPost * if &binary | %!xxd
    au BufReadPost * set ft=xxd | endif
    au BufWritePre * if &binary | %!xxd -r
    au BufWritePre * endif
    au BufWritePost * if &binary | %!xxd
    au BufWritePost * set nomod | endif
augroup END

" auto-pairs
let g:AutoPairsMapBS=1
let g:AutoPairsMultilineBackspace=1
let g:AutoPairsCenterLine=0

" CtrlP
let g:ctrlp_map="<C-u>"
let g:ctrlp_prompt_mappings={
  \ "AcceptSelection('h')": ["<C-i>"],
  \ "AcceptSelection('v')": ["<C-x>"],
  \ }
let g:ctrlp_working_path_mode="a"
let g:ctrlp_lazy_update=1

" EasyAlign
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" NERDTree
let g:NERDTreeQuitOnOpen=1

" NERDCommenter
let g:NERDAltDelims_c=1
let g:NERDCustomDelimiters={"rgbds": {"left": ";", "right": ""}}

" Localvimrc
let g:localvimrc_sandbox=0
let g:localvimrc_count=1
let g:localvimrc_persistent=1
let g:localvimrc_persistence_file=$XDG_DATA_HOME."/vim/localvimrc_persistent"

" Gutentags
set statusline+=\ %{gutentags#statusline()}
set tags=.tags
let g:gutentags_ctags_tagfile=".tags"
let g:gutentags_project_root=[".tags"]
let g:gutentags_add_default_project_roots=0
let g:ctrlp_root_markers=[".tags"]

" Taghighlight
let g:TagHighlightSettings={"TagFileName": ".tags"}

" vimtex
let g:tex_flavor="latex"
let g:vimtex_view_general_viewer="okular"
let g:vimtex_view_general_options="--unique file:@pdf\#src:@line@tex"
"let g:vimtex_view_general_viewer="xpdf"

" vim-highlightedyank
let g:highlightedyank_highlight_duration=400
highlight HighlightedyankRegion cterm=reverse gui=reverse

" vim-LanguageTool
let g:languagetool_jar=$XDG_DATA_HOME."/vim/languagetool/languagetool-commandline.jar"

" Utility functions
function Tabs(stop)
    if a:stop != 0
        let &tabstop=a:stop
        let &shiftwidth=a:stop
        set noexpandtab
        set nosmarttab
    else
        set tabstop=4
        set shiftwidth=4
        set expandtab
        set smarttab
    endif
endfunction
