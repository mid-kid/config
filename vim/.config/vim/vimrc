" Install plugins (vim):
" curl -fLo ${XDG_DATA_HOME:-$HOME/.local/share}/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim && vim +PlugInstall

" Add to .profile:
" export VIMINIT="if !has('nvim') | source ${XDG_CONFIG_HOME:-$HOME/.config}/vim/vimrc | endif"

" Must-have...
set nocompatible

" XDG Base Directory specification (https://blog.joren.ga/tools/vim-xdg)
if empty($XDG_CACHE_HOME) | let $XDG_CACHE_HOME = $HOME."/.cache" | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config" | endif
if empty($XDG_DATA_HOME) | let $XDG_DATA_HOME = $HOME."/.local/share" | endif
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after
set packpath^=$XDG_DATA_HOME/vim
set packpath+=$XDG_DATA_HOME/vim/after
let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", "p")
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, "p")
if !has("nvim") | set viminfofile=$XDG_CACHE_HOME/vim/viminfo | endif

" Set plugins
call plug#begin($XDG_DATA_HOME."/vim/plugged")

" Faaancy
Plug 'junegunn/seoul256.vim'  " Theme
Plug 'airblade/vim-gitgutter'  " Show git diffs on the side
Plug 'Xuyuanp/nerdtree-git-plugin'  " Show git status in nerdtree
Plug 'machakann/vim-highlightedyank'  " Highlight what you've copied
"Plug 'abudden/taghighlight-automirror'

" Syntax
Plug 'cespare/vim-toml'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'lervag/vimtex'

" Project management
Plug 'editorconfig/editorconfig-vim'  " Support editorconfig spec
Plug 'scrooloose/nerdtree'  " File browser (CTRL+O)
Plug 'ctrlpvim/ctrlp.vim'  " Fuzzy finding file browser (CTRL+P) (browse tags with ;.)
Plug 'embear/vim-localvimrc'  " Support per-project vimrc files
Plug 'ludovicchabant/vim-gutentags'  " Auto-update tags file

" Editing
Plug 'scrooloose/nerdcommenter'  " Comment easily (easily my most-used plugin)
Plug 'Raimondi/delimitMate'  " Auto-close quotes, parens, etc...
Plug 'vim-scripts/AutoComplPop'  " Autocompletion popup
Plug 'tpope/vim-surround'  " Bindings too hard to remember and use tbhon
Plug 'junegunn/vim-easy-align'  " Alignment commands bound to 'ga'
Plug 'junegunn/goyo.vim'  " Distraction-free editing

call plug#end()

" Don't litter tempfiles everywhere
set undodir=$XDG_CACHE_HOME/vim/undo | call mkdir(&undodir, "p")
set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, "p")
set directory=$XDG_CACHE_HOME/vim/swp | call mkdir(&directory, "p") 

" Color scheme
let g:seoul256_background = 233
colorscheme seoul256

" Syntax highlighting
filetype plugin indent on
syntax on

" Whitespace
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set autoindent
set listchars=tab:>-,space:Â·
set cinoptions+=:0  " Don't indent case in switch

" Display
set number
set hlsearch
set incsearch
set statusline=%f
set colorcolumn=80
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/  " ExtraWhitespace is defined in the theme

" Behavior
set modeline
set omnifunc=syntaxcomplete#Complete
set mouse=a
set ttyfast
set clipboard=unnamed
set clipboard+=unnamedplus
set backup
set undofile
set fileencodings=ucs-bom,utf-8,sjis,default  " Try SHIFT-JIS
if has("patch-8.1.0360") | set diffopt+=internal,algorithm:patience | endif  " Use slower but better diff algorithm

" Keybinds
let mapleader=";"
let maplocalleader=";"
map <F1> :make<CR>
map <F8> :!curl -T % chunk.io 2> /dev/null<CR>
map <F12> :syntax sync fromstart<CR>
map <C-n> :noh<CR>
map <C-d> :set invlist<CR>
map <C-o> :NERDTreeToggle<CR>
map <leader>. :CtrlPTag<CR>

nnoremap <C-h> <C-w><C-h>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>

" CtrlP
let g:ctrlp_map="<C-p>"
let g:ctrlp_prompt_mappings={
  \ "AcceptSelection('h')": ["<C-i>"],
  \ "AcceptSelection('v')": ["<C-x>"],
  \ }
let g:ctrlp_working_path_mode="a"
let g:ctrlp_lazy_update=1

" EasyAlign
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:NERDTreeQuitOnOpen=1

" NERDCommenter
let g:NERDAltDelims_c=1
let g:NERDCustomDelimiters={"rgbds": {"left": ";", "right": ""}}

" Localvimrc
let g:localvimrc_sandbox=0
let g:localvimrc_count=1
let g:localvimrc_persistent=1
let g:localvimrc_persistence_file=$XDG_DATA_HOME."/vim/localvimrc_persistent"

" Gutentags
set statusline+=\ %{gutentags#statusline()}
set tags=.tags
let g:gutentags_ctags_tagfile=".tags"
let g:gutentags_project_root=[".tags"]
let g:gutentags_add_default_project_roots=0
let g:ctrlp_root_markers=[".tags"]

" Taghighlight
let g:TagHighlightSettings={"TagFileName": ".tags"}

" vimtex
let g:tex_flavor="latex"
let g:vimtex_view_general_viewer="xpdf"

" vim-highlightedyank
let g:highlightedyank_highlight_duration=400
highlight HighlightedyankRegion cterm=reverse gui=reverse

" vim -b : edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre *.bin setlocal binary
  au BufReadPost * if &binary | %!xxd
  au BufReadPost * set ft=xxd | endif
  au BufWritePre * if &binary | %!xxd -r
  au BufWritePre * endif
  au BufWritePost * if &binary | %!xxd
  au BufWritePost * set nomod | endif
augroup END
